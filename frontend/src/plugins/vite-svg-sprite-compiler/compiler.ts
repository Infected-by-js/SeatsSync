import {promises as fs} from "fs"
import {createSprite, ensureDirectoryExists, getIconNameFromPath, getSvgFiles, optimizeSvg} from "./utils"

import type {FSWatcher} from "fs"
import type {CompileCallback} from "svg-sprite"
import type {SpriteCompiler, SvgSpriteCompilerOptions} from "./types"

export function createCompiler(options: SvgSpriteCompilerOptions): SpriteCompiler {
  let watcher: FSWatcher | null = null

  async function generate(): Promise<void> {
    try {
      const {iconsDir, outputSprite, typesOutput, exclude = []} = options

      await Promise.all([ensureDirectoryExists(outputSprite), ensureDirectoryExists(typesOutput)])

      const svgFiles = await getSvgFiles(iconsDir, exclude)

      if (!svgFiles.length) {
        console.log("No svg files founded")
        return
      }

      const sprite = createSprite()

      for (const filePath of svgFiles) {
        const content = await fs.readFile(filePath, "utf-8")
        const optimizedContent = await optimizeSvg(content, options.svgoConfig)
        sprite.add(filePath, null, optimizedContent)
      }

      const result = await new Promise<ReturnType<CompileCallback>>((resolve, reject) => {
        sprite.compile((error, result) => {
          if (error) reject(error)
          else resolve(result)
        })
      })

      await fs.writeFile(outputSprite, result.symbol.sprite.contents)
      console.log(`✅ Sprite generated at ${outputSprite}`)

      const iconNames = svgFiles.map(getIconNameFromPath)
      const typesContent = `
/* prettier-ignore */

/**
 * This file was autogenerated by vite-svg-sprite-compiler plugin.
 * Do not edit this file manually.
 */
export type IconName = ${iconNames.map((name) => `"${name}"`).join(" | ")};
`.trimStart()

      await fs.writeFile(typesOutput, typesContent)

      if (exclude.length) console.log(` Excluded icons: ${exclude.join(", ")}`)
      console.log(`✅ Types generated at ${typesOutput}`)
    } catch (error) {
      console.error("Failed to generate sprite:", error)
      throw error
    }
  }

  function dispose(): void {
    if (watcher) {
      watcher.close()
      watcher = null
    }
  }

  return {
    generate,
    dispose,
  }
}
