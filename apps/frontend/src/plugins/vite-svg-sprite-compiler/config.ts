import {basename, join} from "path"

import type {Config as SVGOConfig} from "svgo"

export const SVGO_CONFIG: SVGOConfig = {
  multipass: true,
  plugins: [
    "removeDoctype",
    "removeXMLProcInst",
    "removeComments",
    "removeMetadata",
    "removeEditorsNSData",
    "cleanupAttrs",
    "minifyStyles",
    "convertStyleToAttrs",
    "cleanupIds",
    "removeRasterImages",
    "removeUselessDefs",
    "cleanupNumericValues",
    "cleanupListOfValues",
    "convertColors",
    "removeUnknownsAndDefaults",
    "removeNonInheritableGroupAttrs",
    "removeUselessStrokeAndFill",
    "removeViewBox",
    "cleanupEnableBackground",
    "removeHiddenElems",
    "removeEmptyText",
    "convertShapeToPath",
    "moveElemsAttrsToGroup",
    "moveGroupAttrsToElems",
    "collapseGroups",
    "convertPathData",
    "convertTransform",
    "removeEmptyAttrs",
    "removeEmptyContainers",
    "mergePaths",
    "removeUnusedNS",
    "sortAttrs",
    "removeTitle",
    "removeDesc",
    "removeDimensions",
    "removeStyleElement",
    "removeScriptElement",
  ],
} as const

export const SPRITE_FILENAME_EXTENSION = ".svg"
export const DEFAULT_SPRITE_NAME = "icons-sprite"
export const DEFAULT_PUBLIC_DIR = "public"

export function generateTypesContent(params: {iconNames: string[]; spriteFilename: string; spriteHash: string}): string {
  const {iconNames, spriteFilename, spriteHash} = params

  return `
/**
 * This file was autogenerated by vite-svg-sprite-compiler plugin.
 * Do not edit this file manually.
 */
 
/* prettier-ignore */
export type IconName = ${iconNames.map((name) => `"${name}"`).join(" | ")};

/* prettier-ignore */
export const spriteInfo = {
  filename: "${spriteFilename}",
  hash: "${spriteHash}"
} as const;
`.trimStart()
}

export function getDefaultSpritePath(): string {
  return join(DEFAULT_PUBLIC_DIR, `${DEFAULT_SPRITE_NAME}${SPRITE_FILENAME_EXTENSION}`)
}

export function getSpriteBaseName(outputSprite: string): string {
  return basename(outputSprite, SPRITE_FILENAME_EXTENSION)
}

export function generateSpriteFilename(params: {outputSprite: string; hash: string}): string {
  const {outputSprite, hash} = params
  const baseName = getSpriteBaseName(outputSprite)
  return `${baseName}.${hash}${SPRITE_FILENAME_EXTENSION}`
}
